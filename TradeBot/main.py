from aiogram import Bot, Dispatcher, executor, types
import aiohttp
from aiogram import types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import random
import datetime
import asyncio
import requests
import mysql
import mysql.connector
from mysql.connector import Error, pooling

from config import TOKEN, TWO_TOKEN, CHAT_USER_ID, altcoins
from config import db_data, db_host, db_pass, db_port, db_user, connection

last_api_request_time = 0
logging.basicConfig(level=logging.INFO)
NOTIFICATION_BOT_TOKEN = TWO_TOKEN  #–≤—Ç–æ—Ä–æ–π –±–æ—Ç
NOTIFICATION_BOT_CHAT_ID = CHAT_USER_ID #–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
notification_dp = Bot(token=NOTIFICATION_BOT_TOKEN)
notification_dp = Dispatcher(notification_dp)
print(altcoins)
user_balances = {}
file_id = "CAACAgUAAxkBAAKfKWZTIiBxjIH4ufOA8WdYjZws7RuPAAJrAwACAmDwV2FMLc7Ps_79NQQ"
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

def create_connection():
    connection = None
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            passwd="123",
            database="user_id_telegram"
        )
        print("[OK] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Error as e:
        print(f"[error] '{e}'")
    return connection

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_table(connection, table_name, create_table_query):
    try:
        cursor = connection.cursor()
        cursor.execute(f"SHOW TABLES LIKE '{table_name}';")
        result = cursor.fetchone()
        if result:
            print(f"[OK] –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            cursor.execute(create_table_query)
            connection.commit()
            print(f"[OK] –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    except Error as e:
        print(f"[error] '{e}'")




timer_active = False
top_up_amount = 0
top_up_user_id = None

class BuyState(StatesGroup):
    amount = State()

class TopUpState(StatesGroup):
    amount = State()

class PageState(StatesGroup):
    page = State()

class InvestState(StatesGroup):
    waiting_for_investment = State()

class InvestProcess(StatesGroup):
    waiting_for_amount = State()
    waiting_for_direction = State()

class InvestProcess(StatesGroup):
    waiting_for_amount = State()
    waiting_for_manual_amount = State()
    waiting_for_direction = State()
    waiting_for_wait_time = State()

class WithdrawProcess(StatesGroup):
    waiting_for_withdraw_amount = State()
    waiting_for_card_details = State()

class SellState(StatesGroup):
    amount = State()

class SellStates(StatesGroup):
    waiting_for_quantity = State()
    confirm_sell = State()

crypto_display_names = {
    'bitcoin': 'Bitcoin/USD',
    'ethereum': 'Ethereum/USD',
    'qtum': 'Qtum/USD',
    'tron': 'Tron/USD',
    'litecoin': 'Litecoin/USD',
    'ripple': 'Ripple/USD',
    'cardano': 'Cardano/USD',
    'solana': 'Solana/USD',
    'dogecoin': 'Dogecoin/USD',
    'polkadot': 'Polkadot/USD',
    'maker': 'Maker/USD',
    'quant': 'Quant/USD',
    'busd': 'BUSD/USD',
    'optimism': 'Optimism/USD',
    'okb': 'OKB/USD',
    'shiba': 'Shiba Inu/USD',
    'apecoin': 'ApeCoin/USD',
    'dai': 'Dai/USD',
    'stellar': 'Stellar/USD',
    'stepn': 'STEPN/USD',
    'wreppedbitcoin': 'Wrapped Bitcoin/USD',
    'near': 'Near/USD',
    'gala': 'Gala/USD',
    'cronos': 'Cronos/USD'
}

top_up_user_id = None
selected_crypto = None
crypto_wallets = {
    'tron': 'TRON_WALLET_ADDRESS',
    'toncoin': 'UQAR-uQI8owPa_IIsbpTgy6E97HHriUJoEqKH-vxPkkCnjqU',
    'eth': 'ETH_WALLET_ADDRESS',
    'usdt': 'TTvMYqS6EcQr6ugcJoP5s6B5iARx2HdMuR',
    'notcoin': 'UQAR-uQI8owPa_IIsbpTgy6E97HHriUJoEqKH-vxPkkCnjqU'
}

def is_in_top_up_process(user_id):
    global top_up_user_id
    return top_up_user_id == user_id

async def get_crypto_price(crypto, currency):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto}&vs_currencies={currency}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    logging.info(f"API response: {data}")
                    
                    # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                    logging.info(f"Price data for {crypto} in {currency}: {data.get(crypto)}")
                    
                    price = data.get(crypto, {}).get(currency)
                    if price is None:
                        logging.error(f"Price for {crypto} in {currency} is not found in the response")
                        return None
                    return price
                else:
                    logging.error(f"Error fetching crypto price: {response.status} {response.reason}")
                    return None
    except Exception as e:
        logging.error(f"Exception fetching crypto price: {e}")
        return None

try:
    connection = mysql.connector.connect(
        host=db_host,
        user=db_user,
        password=db_pass,
        database=db_data,
        port=db_port
    )

    if connection.is_connected():
        print("Connected to MySQL database")

except mysql.connector.Error as err:
    print(f"–û–®–ò–ë–ö–ê –î–ê–õ–ë–ê–ï–ë: {err}")


finally:
    if connection and connection.is_connected():
        connection.close()
        print("MySQL connection is closed")

async def send_my_cabinet(message: types.Message):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1100 –¥–æ 1200
    online_count = random.randint(1100, 1200)
    
    user_id = message.from_user.id
    balance = user_balances.get(user_id, 0)
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è Bitcoin –∏ Ethereum
    bitcoin_load = get_random_load_color()
    ethereum_load = get_random_load_color()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–Ω–µ—Ç—É –∏ –µ—ë —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
    altcoin = altcoins.pop(0)
    altcoin_load = altcoin["name:"] + ": " + altcoin["color"]
    # –ü–æ–º–µ—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ
    altcoins.append(altcoin)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - 2)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        InlineKeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='top_up'),
        InlineKeyboardButton("üí∞–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw'),
        InlineKeyboardButton("üõ°Ô∏è–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data='verification'),
        InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
    )
        
    my_cabinet_message = f"""
üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üõ°Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè¶ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ
üÜî ID: {user_id}
üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: 0
‚úÖ –£–¥–∞—á–Ω—ã—Ö: 0
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: 0
üí∞ –í—ã–≤–æ–¥–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–æ 0 –Ω–∞ —Å—É–º–º—É 0 ‚ÇΩ
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_count}

–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Bitcoin: {bitcoin_load}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Ethereum: {ethereum_load}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å {altcoin_load}
"""
    
    photo_url = 'https://ibb.co/8dxBz4M'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_cabinet_message,
        reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
def get_random_load_color():
    return random.choice(["üü°", "üü¢", "üî¥"])

@dp.callback_query_handler(lambda call: call.data == 'top_up')
async def process_top_up(call: types.CallbackQuery):
    top_up_keyboard = InlineKeyboardMarkup(row_width=1)
    top_up_keyboard.add(
        InlineKeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data='top_up_card'),
        InlineKeyboardButton("üí±–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data='top_up_crypto')
    )
    
    await call.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
        reply_markup=top_up_keyboard
    )

@dp.callback_query_handler(lambda call: call.data == 'top_up_card')
async def process_top_up_card(call: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer("""
<i>–ü—Ä–æ—Å–∏–º –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—â–µ–Ω–∏—è.

–°–µ–π—á–∞—Å —É –Ω–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.</i>
""", parse_mode='HTML')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    await call.message.reply_sticker("CAACAgIAAxkBAAK2q2aibTThRZAMaQxi-54Cqpp4PRl8AAJ-AQACK15TC4qyw0Zen8nxNQQ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def get_crypto_price(crypto, currency="rub"):
    url = f'https://api.coingecko.com/api/v3/simple/price?ids={crypto}&vs_currencies={currency}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            logging.info(f"Received data from CoinGecko: {data}")
            return data[crypto][currency]

def is_in_top_up_process(user_id):
    global top_up_user_id
    return top_up_user_id == user_id

@dp.callback_query_handler(lambda call: call.data in ['top_up_crypto_tron', 'top_up_crypto_toncoin', 'top_up_crypto_eth', 'top_up_crypto_usdt', 'top_up_crypto_notcoin'])
async def process_crypto_top_up(call: types.CallbackQuery):
    global selected_crypto, top_up_user_id
    top_up_user_id = call.from_user.id
    selected_crypto = call.data.split('_')[-1]  # tron, toncoin, eth, usdt, notcoin

    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")

@dp.message_handler(lambda message: message.text.isdigit() and is_in_top_up_process(message.from_user.id))
async def process_top_up_amount(message: types.Message):
    global selected_crypto
    try:
        amount_rub = float(message.text)
        crypto_ids = {
            'tron': 'tron',
            'toncoin': 'the-open-network',
            'eth': 'ethereum',
            'usdt': 'tether',
            'notcoin': 'notcoin'
        }
        crypto_id = crypto_ids[selected_crypto]
        crypto_price = await get_crypto_price(crypto_id, "rub")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        amount_crypto = round(amount_rub / crypto_price, 8)

        wallet_address = crypto_wallets[selected_crypto]

        await bot.send_message(
            message.chat.id,
            f"‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ {selected_crypto.upper()}\n\n"
            f"–°—É–º–º–∞: {amount_crypto} {selected_crypto.upper()}\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {wallet_address}\n\n"
            f"‚ö†Ô∏è –ö—É—Ä—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ 60 –º–∏–Ω—É—Ç!\n"
            f"‚ö†Ô∏è –£—á—Ç–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–π –±–∏—Ä–∂–∏, –Ω–∞ –Ω–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–π—Ç–∏ —Ä–æ–≤–Ω–æ —Ç–∞ —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ. –ï—Å–ª–∏ –ø–æ "
            f"–∫–∞–∫–æ–º—É-—Ç–æ —Å—Ç–µ—á–µ–Ω–∏—é –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ —Å—É–º–º–∞ –ø—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            f"‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        )
        top_up_user_id = None  # –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"Error processing top up amount: {e}")

async def send_top_up_options(call: types.CallbackQuery):
    top_up_keyboard = InlineKeyboardMarkup(row_width=1)
    top_up_keyboard.add(
        # InlineKeyboardButton("Tron (TRC20)", callback_data='top_up_crypto_tron'),
        InlineKeyboardButton("Toncoin", callback_data='top_up_crypto_toncoin'),
        InlineKeyboardButton("Ethereum (ETH)", callback_data='top_up_crypto_eth'),
        InlineKeyboardButton("Tether (USDT)", callback_data='top_up_crypto_usdt'),
        InlineKeyboardButton("Notcoin", callback_data='top_up_crypto_notcoin')
    )
    
    await call.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=top_up_keyboard
    )

@dp.callback_query_handler(lambda call: call.data == 'top_up_crypto')
async def process_top_up(call: types.CallbackQuery):
    await send_top_up_options(call)

@dp.callback_query_handler(lambda call: call.data == 'start_top_up')
async def start_top_up(call: types.CallbackQuery):
    await send_top_up_options(call)


# async def send_bank_options(call: types.CallbackQuery):
#     bank_keyboard = InlineKeyboardMarkup(row_width=1)
#     bank_keyboard.add(
#         InlineKeyboardButton("–°–±–µ—Ä–ë–∞–Ω–∫", callback_data='sberbank'),
#         InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='tinkoff')
#     )
    
#     await call.message.edit_caption(
#         caption="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
#         reply_markup=bank_keyboard
#     )
# async def process_bank_selection(call: types.CallbackQuery, bank_name: str):
#     await call.message.answer(
#         text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000 —Ä—É–±–ª–µ–π")

# async def start_timer(finish_time, chat_id):
#     while datetime.datetime.now() < finish_time:
#         await asyncio.sleep(60)
#     # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#     await bot.send_message(chat_id, "–ü–æ–∑–¥–Ω–æ, –¥—Ä—É–∂–∏—â–µ! –í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.")
#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞
#     global timer_active
#     timer_active = False

# @dp.message_handler(lambda message: message.text.isdigit())
# async def process_top_up_amount(message: types.Message, state: FSMContext):
#     # data = await state.get_data()
#     global timer_active, top_up_amount
#     try:
#         number = float(message.text)    
#         if number < 1000:
#             await bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAKfK2ZTJHkIu8z1DDCKX4PfYiFsaKKSAAIPDAAC4o45Si0XN8xNQrdQNQQ')
#             await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1000 —Ä—É–±–ª–µ–π.")
#         elif number > 40000:
#             await bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAKfK2ZTJHkIu8z1DDCKX4PfYiFsaKKSAAIPDAAC4o45Si0XN8xNQrdQNQQ')
#             await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 40000 —Ä—É–±–ª–µ–π.")
#         else:
#             top_up_amount = number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
#             finish_time = datetime.datetime.now() + datetime.timedelta(minutes=1)
#             formatted_time = finish_time.strftime("%H:%M")
#             keyboard = types.InlineKeyboardMarkup(row_width=1)
#             keyboard.add(
#                 types.InlineKeyboardButton(text="‚úÖ–ü–æ–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="confirmed"),
#                 types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back")
#             )
#             await message.answer(
#                 text=f"‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n\n"
#                      f"–°—É–º–º–∞: {number} ‚ÇΩ\n\n"
#                      f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n"
#                      f"‚îî0000-0000-0000-0000\n\n"
#                      f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü (–ú–¢–° BANK):\n"
#                      f"‚îî0000-0000-0000-0000\n\n"
#                      f"‚ÄºÔ∏è–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Å—Ç—Ä–æ–∫–µ ¬´–°—É–º–º–∞¬ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.\n"
#                      f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n\n"
#                      f"–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ {formatted_time} –¥–ª—è –æ–ø–ª–∞—Ç—ã",
#                 reply_markup=keyboard
#             )
#             if not timer_active:
#                 timer_active = True
#                 await start_timer(finish_time, message.chat.id)
#     except ValueError:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
#         # await state.finish() 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏–ª(–∞)"
@dp.callback_query_handler(lambda call: call.data == 'confirmed')
async def confirm_top_up(call: types.CallbackQuery):
    global top_up_amount
    user_id = call.from_user.id
    amount = top_up_amount

    notification_message = f"–ö –≤–∞–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç @{call.from_user.username} –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} —Ä—É–±–ª–µ–π."
    notify_payload = {
        'chat_id': NOTIFICATION_BOT_CHAT_ID,
        'text': notification_message,
        'reply_markup': {
            'inline_keyboard': [
                [
                    {'text': '–û–¥–æ–±—Ä–∏—Ç—å', 'callback_data': f'approve_{user_id}_{amount}'}
                ]
            ]
        }
    }
    requests.post(f'https://api.telegram.org/bot{NOTIFICATION_BOT_TOKEN}/sendMessage', json=notify_payload)

    await call.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å"
@notification_dp.callback_query_handler(lambda c: c.data.startswith('approve_'))
async def handle_approve(call: types.CallbackQuery):
    _, user_id, amount = call.data.split('_')
    user_id = int(user_id)
    amount = float(amount)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç—É –¢—Ä–µ–π–¥–∏–Ω–≥
    update_balance_response = requests.post(
        f'https://api.telegram.org/bot{TOKEN}/sendMessage',
        json={
            'chat_id': user_id,
            'text': f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±–ª–µ–π."
        }
    )
    
    if update_balance_response.status_code == 200:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        if user_id in user_balances:
            user_balances[user_id] += amount
        else:
            user_balances[user_id] = amount
        await call.message.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

@dp.callback_query_handler(lambda call: call.data == 'confirmed')
async def start_command_start(message: types.Message):
    await process_top_up(message)   

# @dp.callback_query_handler(lambda c: c.data.startswith('approve_'))
# async def handle_approve(call: types.CallbackQuery):
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ amount –∏–∑ callback_data
#     _, user_id, amount = call.data.split('_')
#     user_id = int(user_id)
#     amount = float(amount)
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ—Ç "–¢—Ä–µ–π–¥–∏–Ω–≥" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
#     trade_payload = {
#         'user_id': user_id,
#         'amount': amount
#     }
#     response = requests.post(f'http://your_trading_bot_url/update_balance', json=trade_payload)
    
#     if response.status_code == 200:
#         await call.message.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
#     else:
#         await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")




# @dp.callback_query_handler(lambda call: call.data == 'confirmed') 
# async def confirmed_new(call: types.CallbackQuery):
#     await call.message.answer(
#         text="""
# ‚úÖ –ü–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ - –í–∞—à —Å—á—ë—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω!
# –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–æ–π.
# """)

@dp.callback_query_handler(lambda call: call.data == 'back') 
async def back_new(call: types.CallbackQuery):
    await send_my_cabinet(call.message)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

@dp.callback_query_handler(lambda call: call.data == 'sberbank')
async def process_sberbank_selection(call: types.CallbackQuery):
    await process_bank_selection(call, "–°–±–µ—Ä–±–∞–Ω–∫")

@dp.callback_query_handler(lambda call: call.data == 'tinkoff')
async def process_tinkoff_selection(call: types.CallbackQuery):
    await process_bank_selection(call, "–¢–∏–Ω—å–∫–æ—Ñ—Ñ")

@dp.callback_query_handler(lambda call: call.data == 'top_up_card')
async def process_top_up_card(call: types.CallbackQuery):
    await send_bank_options(call)

@dp.callback_query_handler(lambda call: call.data == 'withdraw')
async def process_withdraw(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_balance = await get_user_balance(user_id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await call.message.answer(f"""üí∞–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:
                              
–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user_balance} ‚ÇΩ
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1000 ‚ÇΩ
""")
    await WithdrawProcess.waiting_for_withdraw_amount.set()

@dp.message_handler(state=WithdrawProcess.waiting_for_withdraw_amount)
async def withdraw_amount_entered(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == '/start':
        await state.finish()
        await start(message)
        return
    
    try:
        amount = int(message.text)
        user_balance = await get_user_balance(message.from_user.id)
        
        if amount < 1000:
            await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1000 ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return
        
        if user_balance < amount:
            await message.reply("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return

        await state.update_data(amount=amount)
        await message.reply("üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å! ‚ö†Ô∏è")
        await WithdrawProcess.waiting_for_card_details.set()
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

@dp.message_handler(state=WithdrawProcess.waiting_for_card_details)
async def card_details_entered(message: types.Message, state: FSMContext):
    card_number = message.text.strip()
    
    if len(card_number) != 16 or not card_number.isdigit():
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get('amount')
    
    await message.reply("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç 60 –º–∏–Ω—É—Ç –¥–æ 3—Ö —á–∞—Å–æ–≤. –ï—Å–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É.")
    await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'verification')
async def process_verification(call: types.CallbackQuery):
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = """
ü§∑üèª –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—Å–∞–≤ '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è' –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–ø–∞—Å–∏–±–æ!

üèÜ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:

üî∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ.
üî∑ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.
üî∑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö.
üî∑ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
"""
    support_username = "akapovich001"
    support_link = f"https://t.me/{support_username}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    support_keyboard = InlineKeyboardMarkup(row_width=1)
    support_keyboard.add(
        InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", url=support_link),
        InlineKeyboardButton("üîô", callback_data="back")
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ "‚ùå"
    await bot.send_message(
        chat_id=call.message.chat.id,
        text="‚ùå"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        chat_id=call.message.chat.id,
        text=text,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=support_keyboard
    )

@dp.callback_query_handler(lambda call: call.data == 'settings')
async def process_settings(call: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    await call.message.answer("""
–ü–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–∏–º
""")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    await bot.send_sticker(call.message.chat.id, sticker='CAACAgIAAxkBAAK2qWaiYOx1giG_0PqtmSTbBpQZlXpyAAJEFwACHmv5S2V-zNd5lwgcNQQ')


async def send_my_us(message: types.Message):
    my_future_message = """
TokenTrade - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏.


üîπ–í–µ–¥—É—â–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
‚îó –ú—ã –Ω–µ —Å—Ç–æ–∏–º –Ω–∞ –º–µ—Å—Ç–µ –∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏
—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –ª–∏–¥–µ—Ä–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏.


üîπ–õ–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
‚îó –î–æ—Å—Ç—É–ø–Ω–∞—è –∫–∞–∂–¥–æ–º—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–π–¥–µ—Ä–æ–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∑–∞ —Å—á–µ—Ç
–æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã—Ö —É—Å–ª—É–≥.


üîπ–û–±—â–∏–π —É—Å–ø–µ—Ö
‚îó –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –ø—Ä–æ—Å—Ç—É—é –∏ –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ.


–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É TokenTrade –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.
–ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö, —Ç–∞–∫ –∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.
""" 
    photo_url = 'https://ibb.co.com/5X0NCQK'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(row_width=2)

    keyboard.add(
    InlineKeyboardButton("üìñ–£—Å–ª–æ–≤–∏–µ",url='https://telegra.ph/Individual-Contributor-License-Agreement--Nazvanie-Birzhi-02-07'),
    InlineKeyboardButton("üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data='sertificat')
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–∞—Ä–∞–Ω—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞" –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –∏ –¥–µ–ª–∞–µ–º –µ–µ –¥–ª–∏–Ω–Ω–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    keyboard.insert(
    InlineKeyboardButton("üîê –ì–∞—Ä–∞–Ω—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞", callback_data='garant_service')
    )
    keyboard.add(
    InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data='ref_sistem')
)



    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_future_message,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'sertificat')
async def process_callback_sertificat(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    photo_url = 'https://imgbly.com/ib/7miULaQDBP'
    await bot.send_photo(callback_query.from_user.id, photo=photo_url)

@dp.callback_query_handler(lambda c: c.data == 'garant_service')
async def process_callback_garant_service(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    my_text = """
üîπ TokenTrade - –æ–Ω–ª–∞–π–Ω-–±–∏—Ä–∂–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.

–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –≤ –ª—é–±–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–æ—Ä–≥–æ–≤–ª–µ–π.
–ü–æ—ç—Ç–æ–º—É –Ω–∏–∫–∞–∫–∞—è –±–∏—Ä–∂–∞ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–æ–ª–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∏—Å–∫–æ–≤.
–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, TokenTrade –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏
–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–≤–æ–∏—Ö —É—Å–ª—É–≥.

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å TokenTrade, –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è:

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤: TokenTrade –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö
—Å—á–µ—Ç–∞—Ö, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ–º–ø–∞–Ω–∏–∏. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö
—Ä–∏—Å–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ–º –±–∏—Ä–∂–∏.

‚öôÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: TokenTrade –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö,
—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∑–∞—â–∏—Ç—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.

üåê –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: TokenTrade –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∫–æ–º–∏—Å—Å–∏—è—Ö, –ø—Ä–∞–≤–∏–ª–∞—Ö –∏
—É—Å–ª–æ–≤–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å—á–µ—Ç–∞.

ü¶πüèº‚Äç‚ôÇÔ∏è –û–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: TokenTrade –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º, –ø–æ–º–æ–≥–∞—è –∏–º —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏
—Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.

üì≤ –£–¥–æ–±—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: TokenTrade –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—É—é –∏ –ø—Ä–æ—Å—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –∞ —Ç–∞–∫–∂–µ
–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.

‚úÖ Digital Limited Co (–∫–æ–º–ø–∞–Ω–∏—è, –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —É—Å–ª—É–≥–∏ TokenTrade —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –¶–†–û–§–†
(–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ TSRF RU 0395 AA Vv0207).

–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∏–∫–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å 100%-—é –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.
–ü–æ—ç—Ç–æ–º—É, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏
–±–∏—Ä–∂–∏ –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏.
"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîô", callback_data='back_to_send_my_us')
    )
    message = await bot.send_message(chat_id, text=my_text, reply_markup=keyboard)
    return message.message_id

@dp.callback_query_handler(lambda c: c.data == 'back_to_send_my_us')
async def process_callback_back_to_send_my_us(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_my_us(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == 'ref_sistem')
async def process_callback_ref_sistem(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    chat_id = callback_query.message.chat.id
    my_text = f"""
üë´ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞

–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!
–°—Å—ã–ª–∫–∞, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram: https://t.me/TokenTrade_bot?start={user_id}

–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:

–ß–µ–ª–æ–≤–µ–∫, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–π—Å—è –≤ –±–æ—Ç–µ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º 1-–≥–æ –∫—Ä—É–≥–∞.

–ö–æ–≥–¥–∞ —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª 1-–≥–æ –∫—Ä—É–≥–∞ –≤—ã–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ - —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥. –ï—Å–ª–∏ —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª 1-–≥–æ –∫—Ä—É–≥–∞
–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫–æ–≥–æ-—Ç–æ –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ - —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º 2-–≥–æ –∫—Ä—É–≥–∞.

–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 60% –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å–æ —Å–¥–µ–ª–∫–∏ —Ç–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 1-–≥–æ –∫—Ä—É–≥–∞ –∏ 40% –æ—Ç —ç—Ç–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
—Å–æ —Å–¥–µ–ª–∫–∏ —Ç–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2-–≥–æ –∫—Ä—É–≥–∞.

–†–∞–∑–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 30% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏, —É–ø–ª–∞—á–µ–Ω–Ω–æ–π —Å–µ—Ä–≤–∏—Å—É.

–ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª 1-–≥–æ –∏–ª–∏ 2-–≥–æ –∫—Ä—É–≥–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü, —Ç–æ
—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîô", callback_data='back_from_ref_sistem')
    )
    message = await bot.send_message(chat_id, text=my_text, reply_markup=keyboard)
    return message.message_id

@dp.callback_query_handler(lambda c: c.data == 'back_from_ref_sistem')
async def process_callback_back_from_ref_sistem(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_my_us(callback_query.message)


async def send_my_birje(message: types.Message):
    my_birje_message = """
–ê–∫—Ç–∏–≤—ã - —ç—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –ø–æ–∫—É–ø–∞—é—Ç –∏–ª–∏ –ø—Ä–æ–¥–∞—é—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.

–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∞–∫—Ü–∏–∏, –≤–∞–ª—é—Ç—ã, —Å—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –æ–ø—Ü–∏–æ–Ω—ã –∏
–¥—Ä—É–≥–∏–µ.


üóÑ –ê–∫—Ç–∏–≤—ã:
‚îè BTC: 0
‚î£ ETH: 0
‚î£ USDT: 0
‚î£ SHIB: 0
‚îó ATOM: 0
"""
    photo_url = 'https://ibb.co.com/7Y1ZDqj'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - 2)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        InlineKeyboardButton("üìà –ö—É–ø–∏—Ç—å", callback_data='buy'),
        InlineKeyboardButton("üìâ –ü—Ä–æ–¥–∞—Ç—å", callback_data='c')
    )
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_birje_message,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'buy')
async def process_buy(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    my_text = """
–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:
"""
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("BTC", callback_data='buy_btc'),
        InlineKeyboardButton("ETH", callback_data='buy_eth'),
        InlineKeyboardButton("USDT", callback_data='buy_usdt')
    )
    keyboard.row(
        InlineKeyboardButton("SHIB", callback_data='buy_shib'),
        InlineKeyboardButton("ATOM", callback_data='buy_atom')
    )
    keyboard.add(
        InlineKeyboardButton("üîô", callback_data='back_to_birje')
    )
    await bot.send_message(chat_id, text=my_text, reply_markup=keyboard)

async def get_user_balance(user_id):
    return 0

@dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
async def process_buy_currency(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    currency_mapping = {
        'buy_btc': 'bitcoin',
        'buy_eth': 'ethereum',
        'buy_usdt': 'tether',
        'buy_shib': 'shiba-inu',
        'buy_atom': 'cosmos'
    }
    crypto = currency_mapping[callback_query.data]
    current_price = await get_crypto_price(crypto, 'usd')
    user_balance = await get_user_balance(callback_query.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    my_text = f"""
üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ‚ÇΩ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {crypto.capitalize()}:

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 5000 ‚ÇΩ
–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {current_price} $

–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user_balance} ‚ÇΩ
"""
    await state.update_data(crypto=crypto, current_price=current_price, user_balance=user_balance)
    await BuyState.amount.set()

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîô", callback_data='back_to_birje')
    )
    await bot.send_message(chat_id, text=my_text, reply_markup=keyboard)

@dp.message_handler(state=BuyState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    user_data = await state.get_data()
    crypto = user_data['crypto']
    current_price = user_data['current_price']
    user_balance = user_data['user_balance']

    if amount < 5000:
        await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ 5000 —Ä—É–±–ª–µ–π.")
        return

    if amount > user_balance:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {crypto.capitalize()} –Ω–∞ —Å—É–º–º—É {amount} ‚ÇΩ –ø–æ –∫—É—Ä—Å—É {current_price} $")

    await state.finish()

# async def get_crypto_price(crypto, currency):
#     url = f'https://api.coingecko.com/api/v3/simple/price?ids={crypto}&vs_currencies={currency}'
#     async with aiohttp.ClientSession() as session:
#         async with session.get(url) as response:
#             data = await response.json()
#             return data[crypto][currency]

@dp.callback_query_handler(lambda c: c.data == 'back_to_birje')
async def process_back_to_birje(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_my_birje(callback_query.message)

async def send_my_birje(message: types.Message):
    my_birje_message = """
–ê–∫—Ç–∏–≤—ã - —ç—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –ø–æ–∫—É–ø–∞—é—Ç –∏–ª–∏ –ø—Ä–æ–¥–∞—é—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.
–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∞–∫—Ü–∏–∏, –≤–∞–ª—é—Ç—ã, —Å—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –æ–ø—Ü–∏–æ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ.


üóÑ –ê–∫—Ç–∏–≤—ã:
‚îè BTC: 0
‚î£ ETH: 0
‚î£ USDT: 0
‚î£ SHIB: 0
‚îó ATOM: 0
"""
    photo_url = 'https://ibb.co.com/7Y1ZDqj'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - 2)
    keyboard.add(
        InlineKeyboardButton("üìà –ö—É–ø–∏—Ç—å", callback_data='buy'),
        InlineKeyboardButton("üìâ –ü—Ä–æ–¥–∞—Ç—å", callback_data='sell')
    )
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_birje_message,
        reply_markup=keyboard
    )

async def get_crypto_balance(user_id, crypto):
    # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balances = {
        'bitcoin': 0.000015,
        'ethereum': 10.0,
        'tether': 1000.0,
        'shiba-inu': 1000000.0,
        'cosmos': 50.0
    }
    return balances.get(crypto, 0)

@dp.callback_query_handler(lambda c: c.data == 'sell')
async def show_crypto_balances(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id

    btc_balance = await get_crypto_balance(user_id, 'bitcoin')
    eth_balance = await get_crypto_balance(user_id, 'ethereum')
    usdt_balance = await get_crypto_balance(user_id, 'tether')
    shib_balance = await get_crypto_balance(user_id, 'shiba-inu')
    atom_balance = await get_crypto_balance(user_id, 'cosmos')

    message_text = f"""
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤:

üóÑ –ê–∫—Ç–∏–≤—ã:
‚îè BTC: {btc_balance}
‚î£ ETH: {eth_balance}
‚î£ USDT: {usdt_balance}
‚î£ SHIB: {shib_balance}
‚îó ATOM: {atom_balance}

<blockquote>–í–´–ë–ï–†–ò –ú–û–ù–ï–¢–£ –î–õ–Ø –ü–†–û–î–ê–ñ–ò</blockquote>
"""
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("BTC", callback_data='sell_btc'),
        InlineKeyboardButton("ETH", callback_data='sell_eth'),
        InlineKeyboardButton("USDT", callback_data='sell_usdt')
    )
    keyboard.row(
        InlineKeyboardButton("SHIB", callback_data='sell_shib'),
        InlineKeyboardButton("ATOM", callback_data='sell_atom')
    )
    keyboard.add(
        InlineKeyboardButton("üîô", callback_data='back_to_birje')
    )
    await bot.send_message(chat_id, message_text, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'sell_btc')
async def process_sell_btc(callback_query: types.CallbackQuery, state: FSMContext):
    await process_sell_button(callback_query, 'bitcoin', 'BTC', state)

@dp.callback_query_handler(lambda c: c.data == 'sell_eth')
async def process_sell_eth(callback_query: types.CallbackQuery, state: FSMContext):
    await process_sell_button(callback_query, 'ethereum', 'ETH', state)

@dp.callback_query_handler(lambda c: c.data == 'sell_usdt')
async def process_sell_usdt(callback_query: types.CallbackQuery, state: FSMContext):
    await process_sell_button(callback_query, 'tether', 'USDT', state)

@dp.callback_query_handler(lambda c: c.data == 'sell_shib')
async def process_sell_shib(callback_query: types.CallbackQuery, state: FSMContext):
    await process_sell_button(callback_query, 'shiba-inu', 'SHIB', state)

@dp.callback_query_handler(lambda c: c.data == 'sell_atom')
async def process_sell_atom(callback_query: types.CallbackQuery, state: FSMContext):
    await process_sell_button(callback_query, 'cosmos', 'ATOM', state)

async def process_sell_button(callback_query: types.CallbackQuery, crypto: str, display_name: str, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    user_id = callback_query.from_user.id
    currency = 'usd'
    crypto_price = await get_crypto_price(crypto, currency)
    crypto_balance = await get_crypto_balance(user_id, crypto)
    
    await state.update_data(crypto=crypto, crypto_price=crypto_price, display_name=display_name, crypto_balance=crypto_balance)
    
    message_text = f"""
–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞—Ç—å?

–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã: {crypto_price} {currency}
–í–∞—à –±–∞–ª–∞–Ω—Å: {crypto_balance} {display_name}
"""
    
    await bot.send_message(callback_query.message.chat.id, message_text)
    await SellStates.waiting_for_quantity.set()

@dp.message_handler(state=SellStates.waiting_for_quantity)
async def get_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = float(message.text)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    
    data = await state.get_data()
    crypto_balance = data.get('crypto_balance', 0)  
    display_name = data.get('display_name', '–º–æ–Ω–µ—Ç—ã')  
    
    if quantity > crypto_balance:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {display_name}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {crypto_balance} {display_name}.")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data="top_up"))
        await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
        return

    crypto_price = data.get('crypto_price', 0)  
    
    total_value = quantity * crypto_price
    
    message_text = f"""
    –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {quantity} {display_name}.
    –ü–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É {crypto_price} USD, –≤–∞—à–∞ –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏—Ç: {total_value:.2f} USD
    """
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ü—Ä–æ–¥–∞—Ç—å", callback_data='confirm_sell'),
        InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å", callback_data='cancel_sell')
    )
    
    await message.reply(message_text, reply_markup=keyboard)
    await SellStates.confirm_sell.set()

@dp.callback_query_handler(lambda c: c.data == 'confirm_sell', state=SellStates.confirm_sell)
async def confirm_sell(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'cancel_sell', state=SellStates.confirm_sell)
async def cancel_sell(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–ª–∏, –º–æ–Ω–µ—Ç—ã –ø—Ä–∏ –≤–∞—Å :)")
    await state.finish()

# async def get_crypto_price(crypto, currency):
#     url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto}&vs_currencies={currency}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL API
#     headers = {
#         'Authorization': 'CG-Ghg7AMnQqS1ocERbA9M24RXL'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á API
#     }
    
#     try:
#         async with aiohttp.ClientSession() as session:
#             async with session.get(url, headers=headers) as response:
#                 if response.status == 200:
#                     data = await response.json()
#                     return data['price']
#                 else:
#                     logging.error(f"Error fetching crypto price: {response.status} {response.reason}")
#                     return None
#     except Exception as e:
#         logging.error(f"Exception fetching crypto price: {e}")
#         return None


@dp.callback_query_handler(lambda c: c.data == 'number1_next')
async def process_number1_next(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(page=1)
    await send_my_future(callback_query.message, state)

@dp.callback_query_handler(lambda c: c.data == 'next_button')
async def process_next_button(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('page', 1)
    await state.update_data(page=current_page + 1)
    await send_my_future(callback_query.message, state)

@dp.callback_query_handler(lambda c: c.data == 'previous_button')
async def process_previous_button(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('page', 1)
    if current_page > 1:
        await state.update_data(page=current_page - 1)
    await send_my_future(callback_query.message, state)

# async def get_crypto_price(crypto_name, currency):
#     global last_api_request_time
#     current_time = asyncio.get_event_loop().time()
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
#     if current_time - last_api_request_time < 1:
#         # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã, –∂–¥–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç 1 —Å–µ–∫—É–Ω–¥–∞
#         await asyncio.sleep(1 - (current_time - last_api_request_time))
#     try:
#         url = f'https://api.coingecko.com/api/v3/simple/price?ids={crypto_name}&vs_currencies={currency}'
#         async with aiohttp.ClientSession() as session:
#             async with session.get(url) as response:
#                 if response.status == 200:
#                     data = await response.json()
#                     price = data.get(crypto_name, {}).get(currency)
#                     if price is None:
#                         raise ValueError(f"Price for {crypto_name} in {currency} is not found in the response")
#                     logging.info(f"Price for {crypto_name}: {price}")
#                     return price
#                 else:
#                     logging.error(f"Failed to fetch price for {crypto_name}. Status code: {response.status}")
#                     return None
#     except Exception as e:
#         logging.error(f"Error getting price for {crypto_name}: {e}")
#         return None
#     finally:
#         # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
#         last_api_request_time = asyncio.get_event_loop().time()

async def get_user_balance(user_id):
    # Mock function: Replace with actual logic to get user's balance
    return 0.0

async def send_my_future(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('page', 1)
    
    my_us_message = f"""
*–û–ø—Ü–∏–æ–Ω—ã(—Ñ—å—é—á–µ—Ä—Å—ã)* - —ç—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä—É –ø—Ä–∞–≤–æ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å
–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –≤
–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±—É–¥—É—â–µ–º.

üí† *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:*
"""
    photo_url = 'https://i.yapx.cc/XfHwq.png'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    keyboard = InlineKeyboardMarkup(row_width=2)
    if current_page == 1:
        keyboard.add(
            InlineKeyboardButton("Bitcoin", callback_data='bitcoin_f'),
            InlineKeyboardButton("Ethereum", callback_data='ethereum_f'),
            InlineKeyboardButton("Qtum", callback_data='qtum_f'),
            InlineKeyboardButton("Tron", callback_data='tron_f'),
            InlineKeyboardButton("Litecoin", callback_data='litecoin_f'),
            InlineKeyboardButton("Ripple", callback_data='ripple_f'),
            InlineKeyboardButton("Cardano", callback_data='cardano_f'),
            InlineKeyboardButton("Solana", callback_data='solana_f'),
            InlineKeyboardButton("Dogecoin", callback_data='dogecoin_f'),
            InlineKeyboardButton("Polkadot", callback_data='polkadot_f'),
            InlineKeyboardButton("Maker", callback_data='maker_f'),
            InlineKeyboardButton("Quant", callback_data='quant_f'),
            InlineKeyboardButton("1/2", callback_data='number1_next'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data='next_button'),
        )
    elif current_page == 2:
        keyboard.add(
            InlineKeyboardButton("BUSD", callback_data='busd_f'),
            InlineKeyboardButton("Optimism", callback_data='optimism_f'),
            InlineKeyboardButton("OKB", callback_data='okb_f'),
            InlineKeyboardButton("Shibalnu", callback_data='shiba_f'),
            InlineKeyboardButton("ApeCoin", callback_data='apecoin_f'),
            InlineKeyboardButton("Dai", callback_data='dai_f'),
            InlineKeyboardButton("Stellar", callback_data='stellar_f'),
            InlineKeyboardButton("STEPN", callback_data='stepn_f'),
            InlineKeyboardButton("WreppedBitcoin", callback_data='wreppedbitcoin_f'),
            InlineKeyboardButton("Near", callback_data='near_f'),
            InlineKeyboardButton("Gala", callback_data='gala_f'),
            InlineKeyboardButton("Cronos", callback_data='cronos_f'),
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='previous_button'),
            InlineKeyboardButton("2/2", callback_data='number2_next'),
        )

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_us_message,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def process_crypto_button(callback_query: types.CallbackQuery, state: FSMContext):
    crypto_name = callback_query.data.split('_')[0]
    logging.info(f"Processing button for {crypto_name}")
    current_price = await get_crypto_price(crypto_name, 'usd')
    
    if current_price is None:
        await bot.send_message(callback_query.message.chat.id, "Error fetching crypto price.")
        return

    user_balance = await get_user_balance(callback_query.from_user.id)
    
    if user_balance is None:
        await bot.send_message(callback_query.message.chat.id, "Error fetching user balance.")
        return
    
    display_name = crypto_display_names.get(crypto_name, crypto_name)
    my_text = f"""
üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
{crypto_name}

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 500 ‚ÇΩ
–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {current_price} $

–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user_balance}
"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='previous_button'),
        InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", callback_data='operation_button')
    )
    await bot.send_message(callback_query.message.chat.id, my_text, reply_markup=keyboard)
    await state.update_data(crypto_name=display_name, current_price=current_price)

@dp.callback_query_handler(lambda c: c.data == 'operation_button')
async def operation_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info('Operation button pressed')
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for amount in range(500, 5000, 500):
        buttons.append(InlineKeyboardButton(f"{amount} ‚ÇΩ", callback_data=f'amount_{amount}'))
    for i in range(0, len(buttons), 3):
        keyboard.row(*buttons[i:i+3])
    keyboard.add(
        InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data='amount_manual'),)    
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_crypto'))

    await callback_query.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:", reply_markup=keyboard)
    await InvestProcess.waiting_for_amount.set()

@dp.callback_query_handler(lambda c: c.data == 'go_back_crypto', state=InvestProcess.waiting_for_amount)
async def go_back_to_crypto_selection(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 1)
    
    if current_page == 1:
        await send_my_future(callback_query.message, state)
    else:
        # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        pass

@dp.callback_query_handler(lambda c: c.data.startswith('amount_'), state=InvestProcess.waiting_for_amount)
async def amount_selected(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info('Amount selected')
    if callback_query.data == 'amount_manual':
        await bot.send_message(callback_query.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        await InvestProcess.waiting_for_manual_amount.set()
    else:
        amount = int(callback_query.data.split('_')[1])
        user_balance = await get_user_balance(callback_query.from_user.id)
        
        if user_balance < amount:
            await bot.send_message(callback_query.message.chat.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return
        
        await state.update_data(amount=amount)
        await proceed_to_direction(callback_query.message, state)

@dp.message_handler(state=InvestProcess.waiting_for_manual_amount)
async def manual_amount_entered(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        user_balance = await get_user_balance(message.from_user.id)
        
        if user_balance < amount:
            await message.reply("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:")
            return

        await state.update_data(amount=amount)
        await proceed_to_direction(message, state)
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É.")

async def proceed_to_direction(message, state: FSMContext):
    logging.info('Proceeding to direction')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    coefficients = {
        'direction_up': round(random.uniform(1.1, 2.0), 2),
        'direction_no_change': round(random.uniform(5.1, 10.0), 2),
        'direction_down': round(random.uniform(1.1, 2.0), 2)
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(coefficients=coefficients)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    text = f"""
üîç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:
‚ÜóÔ∏è –í–≤–µ—Ä—Ö - —Ö{coefficients['direction_up']}
‚õîÔ∏è –ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è - —Ö{coefficients['direction_no_change']}
‚ÜòÔ∏è –í–Ω–∏–∑ - —Ö{coefficients['direction_down']}
"""
    
    await message.reply(text)
    
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("–í–≤–µ—Ä—Ö", callback_data='direction_up'),
        InlineKeyboardButton("–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è", callback_data='direction_no_change'),
        InlineKeyboardButton("–í–Ω–∏–∑", callback_data='direction_down')
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=keyboard)
    await InvestProcess.waiting_for_direction.set()

@dp.callback_query_handler(lambda c: c.data in ['direction_up', 'direction_no_change', 'direction_down'], state=InvestProcess.waiting_for_direction)
async def direction_selected(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info('Direction selected')
    direction = callback_query.data
    await state.update_data(direction=direction)
    
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("10 —Å–µ–∫—É–Ω–¥", callback_data='wait_10'),
        InlineKeyboardButton("30 —Å–µ–∫—É–Ω–¥", callback_data='wait_30'),
        InlineKeyboardButton("60 —Å–µ–∫—É–Ω–¥", callback_data='wait_60')
    )
    keyboard.add(
        InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é", callback_data='wait_manual')
    )

    await callback_query.message.reply("üï∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:", reply_markup=keyboard)
    await InvestProcess.waiting_for_wait_time.set()

async def calculate_potential_winning(amount_rub, current_price_usd, coefficient):
    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    usd_to_rub = 90  # –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã
    amount_usd = amount_rub / usd_to_rub
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
    amount_crypto = amount_usd / current_price_usd
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    potential_winning_crypto = amount_crypto * coefficient
    
    # –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–æ–ª–ª–∞—Ä—ã
    potential_winning_usd = potential_winning_crypto * current_price_usd
    
    # –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É–±–ª–∏
    potential_winning_rub = potential_winning_usd * usd_to_rub
    
    return potential_winning_rub

@dp.callback_query_handler(lambda c: c.data in ['wait_10', 'wait_30', 'wait_60'], state=InvestProcess.waiting_for_wait_time)
async def wait_time_selected(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info('Wait time selected')
    wait_time = int(callback_query.data.split('_')[1])
    data = await state.get_data()
    amount = data.get('amount')
    direction = data.get('direction')
    coefficients = data.get('coefficients')
    crypto_name = data.get('crypto_name', 'Unknown Crypto')
    current_price = data.get('current_price', 'N/A')
    
    if current_price == 'N/A':
        await bot.send_message(callback_query.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
    current_price_usd = float(current_price)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    coefficient = coefficients[direction]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    potential_winning_rub = await calculate_potential_winning(amount, current_price_usd, coefficient)
    
    direction_text = {
        'direction_up': '–í–≤–µ—Ä—Ö',
        'direction_no_change': '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è',
        'direction_down': '–í–Ω–∏–∑'
    }

    await bot.send_message(callback_query.message.chat.id, f"""
üí± {crypto_name}

üü£ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} ‚ÇΩ
üü£ –ü—Ä–æ–≥–Ω–æ–∑: {direction_text[direction]}

*–ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price_usd} USD
*–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:  USD
*–ò–∑–º–µ–Ω–µ–Ω–∏–µ: 8.238 USD
üü£ –û—Å—Ç–∞–ª–æ—Å—å: {wait_time} —Å–µ–∫—É–Ω–¥
üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {potential_winning_rub} ‚ÇΩ

–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coefficient}
""")

    await bot.send_sticker(callback_query.message.chat.id, sticker='CAACAgIAAxkBAAKgxWZaES6rPNZMP7AG4qzOBmKH7GGDAAIjAAMoD2oUJ1El54wgpAY1BA')

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É
    notification_message = f"""
–ú–∞–º–æ–Ω—Ç @{callback_query.from_user.username} —Å–æ–∑–¥–∞–ª —Å–¥–µ–ª–∫—É
‚î£ –û–ø—Ü–∏–æ–Ω: {crypto_name}
‚î£ –°—É–º–º–∞: {amount}
‚î£ –ü–æ—Å—Ç–∞–≤–∏–ª: {direction_text[direction]}
‚î£ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {potential_winning_rub}
‚îó –î–∞—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä–∞—Ç—å –º–∞–º–æ–Ω—Ç—É?
"""
    notify_payload = {
        'chat_id': NOTIFICATION_BOT_CHAT_ID,
        'text': notification_message,
        'reply_markup': {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ', 'callback_data': f'approve_{callback_query.from_user.id}_{amount}'},
                    {'text': '‚ùå', 'callback_data': f'deny_{callback_query.from_user.id}_{amount}'}
                ]
            ]
        }
    }
    requests.post(f'https://api.telegram.org/bot{NOTIFICATION_BOT_TOKEN}/sendMessage', json=notify_payload)

    await callback_query.message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –º–∏–Ω—É—Ç—É")


@dp.callback_query_handler(lambda c: c.data.endswith('_f'))
async def process_crypto_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await process_crypto_button(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'next_button')
async def next_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(page=2)
    await send_my_future(callback_query.message, state)

@dp.callback_query_handler(lambda c: c.data == 'previous_button')
async def previous_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(page=1)
    await send_my_future(callback_query.message, state)

async def send_my_support(message: types    .Message):
    support_username = "akapovich001"
    support_link = f"https://t.me/{support_username}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–∏–Ω–µ–π–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    support_keyboard = InlineKeyboardMarkup(row_width=1)
    support_keyboard.add(
        InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=support_link)
    )
    text="""
üìò –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TokenTrade. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.
–î–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Ç–∫–æ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç.–¥.)

*–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É:*
*1.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
*2.* –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.
*3.* –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–Ω–æ, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞.
*4.* –ü—Ä–∏—à–ª–∏—Ç–µ –í–∞—à ID –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –¥–∞–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.
*5.* –û—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
–ù–µ –≥—Ä—É–±–∏—Ç–µ –µ–º—É –∏ –Ω–µ –¥–µ—Ä–∑–∏—Ç–µ, –µ—Å–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —Å–∫–æ—Ä–µ–π—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
"""
    photo_url = 'https://ibb.co.com/rvnSbnL'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=text,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=support_keyboard
    )



async def send_photo_with_text(photo_url: str, text: str, message: types.Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(photo_url) as resp:
            if resp.status != 200:
                return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            data = await resp.read()
            await bot.send_photo(message.chat.id, data, caption=text)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "Unknown"
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton(text="üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üìä –§—å—é—á–µ—Ä—Å—ã"),
        types.KeyboardButton(text="üìà –ë–∏—Ä–∂–∞"),
        types.KeyboardButton(text="üì∞ –ú—ã"),
        types.KeyboardButton(text="üë®üèª‚Äçüíª –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
            user = cursor.fetchone()
            
            if user:
                print("[OK] –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω", {telegram_id})
            else:
                cursor.execute(
                    "INSERT INTO users (username, telegram_id, balance_user, veref_user) VALUES (%s, %s, %s, %s)",
                    (username, telegram_id, '0', 'not_verified')
                )
                connection.commit()
                print(f"[OK] –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n Telegram ID: {telegram_id}")
        except Error as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        finally:
            connection.close()
    else:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    

    welcome_message = """
üìä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ-–±–∏—Ä–∂—É TokenTrade!

üìä –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –≥–¥–µ –í—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –∫—É—Ä—Å–æ–≤. TokenTrade –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–º–µ–Ω–∞ —Å–∞–º—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.

üìà –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ª—É—á—à–∏–π –æ–ø—ã—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –ú—ã —Ç–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –í–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤.

üë®üèª‚Äçüíª _–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è, –Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –í–∞–º_.
    """
    
    photo_url = 'https://ibb.co.com/nwhdMJ9'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=welcome_message,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
dp.register_message_handler(send_my_cabinet, lambda message: message.text == "üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç")
dp.register_message_handler(send_my_future, lambda message: message.text == "üìä –§—å—é—á–µ—Ä—Å—ã")
dp.register_message_handler(send_my_birje, lambda message: message.text == "üìà –ë–∏—Ä–∂–∞")
dp.register_message_handler(send_my_us, lambda message: message.text == "üì∞ –ú—ã")
dp.register_message_handler(send_my_support, lambda message: message.text == "üë®üèª‚Äçüíª –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
dp.register_message_handler(send_my_future, state=PageState.page)
dp.register_callback_query_handler(process_crypto_button_callback)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await asyncio.gather(
        notification_dp.start_polling(),
        bot.start_polling()
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, )